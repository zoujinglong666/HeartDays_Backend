-- Table: public.plans

-- DROP TABLE IF EXISTS public.plans;

CREATE TABLE IF NOT EXISTS public.plans
(
    id bigint NOT NULL DEFAULT nextval('plans_id_seq'::regclass),
    status smallint NOT NULL DEFAULT 0,
    priority smallint NOT NULL DEFAULT 1,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    user_id uuid,
    title character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default",
    category character varying COLLATE pg_catalog."default",
    remarks character varying COLLATE pg_catalog."default",
    date timestamp without time zone,
    reminder_at timestamp without time zone,
    completed_at timestamp without time zone,
    CONSTRAINT plans_pkey PRIMARY KEY (id)
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.plans
    OWNER to postgres;


-- Table: public.anniversaries

-- DROP TABLE IF EXISTS public.anniversaries;

CREATE TABLE IF NOT EXISTS public.anniversaries
(
    id integer NOT NULL DEFAULT nextval('anniversaries_id_seq'::regclass),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    icon character varying(10) COLLATE pg_catalog."default" NOT NULL,
    color character varying(20) COLLATE pg_catalog."default",
    type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    is_pinned boolean NOT NULL DEFAULT false,
    is_highlighted boolean NOT NULL DEFAULT false,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    repetitive_type character varying(10) COLLATE pg_catalog."default",
    user_id uuid,
    date timestamp without time zone,
    CONSTRAINT anniversaries_pkey PRIMARY KEY (id)
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.anniversaries
    OWNER to postgres;


-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    avatar character varying COLLATE pg_catalog."default",
    roles text COLLATE pg_catalog."default" NOT NULL DEFAULT '["user"]'::text,
    "isActive" boolean NOT NULL DEFAULT true,
    "createdAt" timestamp without time zone NOT NULL DEFAULT now(),
    "updatedAt" timestamp without time zone NOT NULL DEFAULT now(),
    "userAccount" character varying(50) COLLATE pg_catalog."default" NOT NULL,
    gender users_gender_enum NOT NULL DEFAULT '0'::users_gender_enum,
    CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY (id),
    CONSTRAINT "UQ_4f3bb4a9f71584ab26713803fe2" UNIQUE ("userAccount"),
    CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE (email)
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;
-- Index: IDX_4f3bb4a9f71584ab26713803fe

-- DROP INDEX IF EXISTS public."IDX_4f3bb4a9f71584ab26713803fe";

CREATE INDEX IF NOT EXISTS "IDX_4f3bb4a9f71584ab26713803fe"
    ON public.users USING btree
    ("userAccount" COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;



CREATE TABLE chat_sessions (
                               id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
                               type varchar(20) NOT NULL,
                               name varchar(255),
                               created_at timestamp DEFAULT now(),
                               updated_at timestamp DEFAULT now()
);

CREATE TABLE chat_session_members (
                                      id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
                                      session_id uuid NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,
                                      user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                                      joined_at timestamp DEFAULT now()
);

CREATE TABLE chat_messages (
                               id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
                               session_id uuid NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,
                               sender_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                               content text NOT NULL,
                               type varchar(20) DEFAULT 'text',
                               created_at timestamp DEFAULT now(),
                               status varchar(20) DEFAULT 'sent'
);

CREATE TABLE chat_message_reads (
                                    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
                                    message_id uuid NOT NULL REFERENCES chat_messages(id) ON DELETE CASCADE,
                                    user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                                    read_at timestamp DEFAULT now()
);



CREATE TABLE chat_session_settings (
                                       id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
                                       user_id uuid NOT NULL,
                                       session_id uuid NOT NULL,
                                       is_pinned boolean DEFAULT false,
                                       is_muted boolean DEFAULT false,
                                       updated_at timestamp DEFAULT now(),
                                       UNIQUE (user_id, session_id)
);

CREATE TABLE friendships (
                             id BIGSERIAL PRIMARY KEY,
                             user_id BIGINT NOT NULL,
                             friend_id BIGINT NOT NULL,
                             status VARCHAR(20) NOT NULL DEFAULT 'pending', -- pending/accepted/rejected/blocked
                             created_at TIMESTAMP NOT NULL DEFAULT NOW(),
                             updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
                             CONSTRAINT unique_friendship UNIQUE (user_id, friend_id)
);

-- 可选：为 user_id, friend_id 建索引，加速查询
CREATE INDEX idx_friendships_user_id ON friendships(user_id);
CREATE INDEX idx_friendships_friend_id ON friendships(friend_id);

CREATE TABLE todo_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id),
  title VARCHAR(255) NOT NULL,
  done BOOLEAN DEFAULT FALSE,
  priority SMALLINT DEFAULT 1,
  expanded BOOLEAN DEFAULT TRUE,
  parent_id UUID REFERENCES todo_items(id),
  sort_order INTEGER DEFAULT 0, -- ✅ 推荐：避免保留字冲突
  reminder_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
    
